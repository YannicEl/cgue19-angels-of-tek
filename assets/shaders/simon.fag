#version 430
layout (location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 uv;

uniform mat4 modelMatrix;
uniform mat4 viewProjMatrix;
uniform mat3 normalMatrix;
uniform float u_time;

out VertexData {
	vec3 position_world;
	vec3 normal_world;
	vec2 uv;
} vert;

vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }

float snoise(vec2 v) {
	const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
						0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
						-0.577350269189626,  // -1.0 + 2.0 * C.x
						0.024390243902439); // 1.0 / 41.0
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);
	vec2 i1;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;
	i = mod289(i); // Avoid truncation effects in permutation
	vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

	vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
	m = m*m ;
	m = m*m ;
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}

float getZ(vec2 pos, vec2 vel) {
	float DF = 0.0;
	float a = 0.0;

	DF += snoise(pos+vel)*.25+.25;
	a = snoise(pos*vec2(cos(u_time*0.15),sin(u_time*0.1))*0.1)*3.1415;
	vel = vec2(cos(a),sin(a));
	DF += snoise(pos+vel)*.25+.25;

	return smoothstep(.7,.75,fract(DF));
}

void main() {
	vert.uv = uv;
	vert.position_world = vec4(modelMatrix * vec4(position, 1)).xyz;
	gl_Position = viewProjMatrix * modelMatrix * vec4(position, 1.0);
	vert.normal_world = normalMatrix * normal;

	// SNOISEEE
	vec2 pos = vec2(vert.position_world.x / 10, vert.position_world.z / 10);
	vec2 vel = vec2(u_time*.1);
	float pos_z = getZ(pos, vel);

	gl_Position *= vec4(1.0, -1 * pos_z + 2.0, 1.0, 1.0);

	// FINITE DIFFERENCE METHOD
	/* vec3 off = vec3(2.0, 2.0, 0.0);
	float hL = getZ(gl_Position.xy - off.xz, vel);
	float hR = getZ(gl_Position.xy + off.xz, vel);
	float hD = getZ(gl_Position.xy - off.zy, vel);
	float hU = getZ(gl_Position.xy + off.zy, vel);

	// deduce terrain normal
	vec3 N = vec3(hL - hR, hD - hU, 2.0);
	N = normalize(N);
	vert.normal_world = N * normalMatrix; */

	// CALCULATE 2 ADJACENT VERTICES
	/* // calulcate neighbours
	vec2 neighbour1 = vec2(vert.position_world.x + 1 / 10, vert.position_world.z / 10);
	float neighbour1_z = getZ(neighbour1, vel);
	vec2 neighbour2 = vec2(vert.position_world.x / 10, vert.position_world.z + 1 / 10);
	float neighbour2_z = getZ(neighbour2, vel);

	//UPDATE NORMALS
	vec3 tangent = vec3(vert.position_world.x + 1, neighbour1_z, vert.position_world.z) - vec3(vert.position_world.x, pos_z, vert.position_world.z);
	vec3 bitangent = vec3(vert.position_world.x, neighbour2_z, vert.position_world.z + 1) - vec3(vert.position_world.x, pos_z, vert.position_world.z);
	
	vec3 newNormal = cross(tangent, bitangent);

	vert.normal_world = newNormal * normalMatrix; */


	// CALCULATE NORMALS OF ALL ADJACENT TRIANGLES
	// ▲
	//▲ ▲
	float step = 1.0f / 10.0f;
	float Zup = getZ(vec2(pos.x, pos.y + step), vel);
	float Zupright = getZ(vec2(pos.x + step, pos.y + step), vel);
	float Zright = getZ(vec2(pos.x  + step, pos.y), vel);
	float Zdown = getZ(vec2(pos.x, pos.y - step), vel);
	float Zdownleft = getZ(vec2(pos.x - step, pos.y - step), vel);
	float Zleft = getZ(vec2(pos.x - step, pos.y), vel);

	vec3 N = vec3(( 2 * (Zleft - Zright) - Zupright + Zdownleft + Zup - Zdown) / step,
			( 2 * (Zdown - Zup) + Zupright + Zdownleft - Zup - Zleft) / step,
			6);

	vert.normal_world = normalize(N * normalMatrix);
}